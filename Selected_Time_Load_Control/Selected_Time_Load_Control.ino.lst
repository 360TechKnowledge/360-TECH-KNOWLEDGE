
C:\Users\RASELA~1\AppData\Local\Temp\arduino_build_441768/Selected_Time_Load_Control.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	85 c0       	rjmp	.+266    	; 0x112 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
__trampolines_start():
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  1c:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  1e:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  20:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2445
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2447
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  26:	a8 36       	cpi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  28:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2451
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
.do_clear_bss_start():
  2c:	97 d0       	rcall	.+302    	; 0x15c <main>
  2e:	d5 c0       	rjmp	.+426    	; 0x1da <_exit>

00000030 <__bad_interrupt>:
__vector_1():
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <millis>:
millis():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:65
    ovrf++; //Increment counter every 256 clock cycles  
  }
  */

MillisMicrosTime_t millis()
{
  32:	8f 92       	push	r8
  34:	9f 92       	push	r9
  36:	af 92       	push	r10
  38:	bf 92       	push	r11
  3a:	cf 92       	push	r12
  3c:	df 92       	push	r13
  3e:	ef 92       	push	r14
  40:	ff 92       	push	r15
  42:	0f 93       	push	r16
  44:	1f 93       	push	r17
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:67
  MillisMicrosTime_t x;
  uint8_t oldSREG = SREG;
  46:	ef b7       	in	r30, 0x3f	; 63
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:68
  cli();
  48:	f8 94       	cli
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:730
    // Jitter: 0.0141% (0.0001412517 Decimal)
    x = (ovrf * 0)  + (ovrf / 8) + (ovrf / 16) + (ovrf / 64);
  #elif    ACCEPTABLE_MILLIS_ERROR_PPM >= 11275UL
    //  Error: 1.1275% (0.0112745348 Decimal)
    // Jitter: 0.0216% (0.00021628579999999998 Decimal)
    x = (ovrf * 0)  + (ovrf / 8) + (ovrf / 16) + (ovrf / 64) + (ovrf / 128);
  4a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  4e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  52:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  56:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  5a:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
  5e:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <_edata+0x1>
  62:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <_edata+0x2>
  66:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <_edata+0x3>
  6a:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <_edata>
  6e:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <_edata+0x1>
  72:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <_edata+0x2>
  76:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <_edata+0x3>
  7a:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <_edata>
  7e:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <_edata+0x1>
  82:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <_edata+0x2>
  86:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_edata+0x3>
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  92:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  96:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:1649
  //  Error: 0.0000% (0 Decimal)
  // Jitter: 0.0000% (0 Decimal)

  x = (ovrf * 500) ;
#endif
  SREG = oldSREG;
  9a:	ef bf       	out	0x3f, r30	; 63
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:1650
  return x;
  9c:	4a 01       	movw	r8, r20
  9e:	5b 01       	movw	r10, r22
  a0:	43 e0       	ldi	r20, 0x03	; 3
  a2:	b6 94       	lsr	r11
  a4:	a7 94       	ror	r10
  a6:	97 94       	ror	r9
  a8:	87 94       	ror	r8
  aa:	4a 95       	dec	r20
  ac:	d1 f7       	brne	.-12     	; 0xa2 <__stack+0x3>
  ae:	b7 01       	movw	r22, r14
  b0:	a6 01       	movw	r20, r12
  b2:	e4 e0       	ldi	r30, 0x04	; 4
  b4:	76 95       	lsr	r23
  b6:	67 95       	ror	r22
  b8:	57 95       	ror	r21
  ba:	47 95       	ror	r20
  bc:	ea 95       	dec	r30
  be:	d1 f7       	brne	.-12     	; 0xb4 <__stack+0x15>
  c0:	48 0d       	add	r20, r8
  c2:	59 1d       	adc	r21, r9
  c4:	6a 1d       	adc	r22, r10
  c6:	7b 1d       	adc	r23, r11
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	36 95       	lsr	r19
  cc:	27 95       	ror	r18
  ce:	17 95       	ror	r17
  d0:	07 95       	ror	r16
  d2:	fa 95       	dec	r31
  d4:	d1 f7       	brne	.-12     	; 0xca <__stack+0x2b>
  d6:	40 0f       	add	r20, r16
  d8:	51 1f       	adc	r21, r17
  da:	62 1f       	adc	r22, r18
  dc:	73 1f       	adc	r23, r19
  de:	17 e0       	ldi	r17, 0x07	; 7
  e0:	b6 95       	lsr	r27
  e2:	a7 95       	ror	r26
  e4:	97 95       	ror	r25
  e6:	87 95       	ror	r24
  e8:	1a 95       	dec	r17
  ea:	d1 f7       	brne	.-12     	; 0xe0 <__stack+0x41>
  ec:	8a 01       	movw	r16, r20
  ee:	9b 01       	movw	r18, r22
  f0:	08 0f       	add	r16, r24
  f2:	19 1f       	adc	r17, r25
  f4:	2a 1f       	adc	r18, r26
  f6:	3b 1f       	adc	r19, r27
  f8:	c9 01       	movw	r24, r18
  fa:	b8 01       	movw	r22, r16
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/MillisMicrosDelay.c:1651
}
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	cf 90       	pop	r12
 108:	bf 90       	pop	r11
 10a:	af 90       	pop	r10
 10c:	9f 90       	pop	r9
 10e:	8f 90       	pop	r8
 110:	08 95       	ret

00000112 <__vector_3>:
__vector_3():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\variants\tiny13/pins_arduino.c:57

#if !(defined(NO_MILLIS) && NO_MILLIS) && defined(USE_NEW_MILLIS) && USE_NEW_MILLIS
extern volatile MillisMicrosTime_t ovrf;
 
ISR(TIM0_OVF_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\variants\tiny13/pins_arduino.c:58
  ovrf++; //Increment counter every 256 clock cycles  
 124:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 128:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 12c:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 130:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	a1 1d       	adc	r26, r1
 138:	b1 1d       	adc	r27, r1
 13a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 13e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 142:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 146:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\variants\tiny13/pins_arduino.c:59
}
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:
main():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/wiring_lite.c:280
  TCCR0B |= _BV(CS00);
  TCCR0A |= _BV(WGM00)|_BV(WGM01);
  TIMSK0 |= 2;
  TCNT0=0;   
  #else
    turnOnMillis(MILLIS_TIMER_PRESCALE);
 15c:	8f b5       	in	r24, 0x2f	; 47
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	8f bd       	out	0x2f, r24	; 47
 162:	89 b7       	in	r24, 0x39	; 57
 164:	82 60       	ori	r24, 0x02	; 2
 166:	89 bf       	out	0x39, r24	; 57
 168:	83 b7       	in	r24, 0x33	; 51
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	83 bf       	out	0x33, r24	; 51
 16e:	12 be       	out	0x32, r1	; 50
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/wiring_lite.c:282
  #endif
  sei();
 170:	78 94       	sei
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/wiring_lite.c:328
      #define ADC_ARDUINO_PRESCALER 7
    #endif
    
    // Since this is init(), ADCSRA is already going to be zero, we can just
    // set our bits indiscriminantly
    ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | _BV(ADEN);
 172:	86 e8       	ldi	r24, 0x86	; 134
 174:	86 b9       	out	0x06, r24	; 6
pinMode():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/Arduino.h:249
      return;
      // NOP
    }
    else if(mode == OUTPUT)
    {
      ((void)(*((volatile uint8_t *)portModeRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
 176:	b8 9a       	sbi	0x17, 0	; 23
setup():
F:\360TECHKNOWLEDGE-Git2023\360-TECH-KNOWLEDGE\Selected_Time_Load_Control/Selected_Time_Load_Control.ino:10
unsigned long startTime;
unsigned long delayDuration = 7L * 60L * 60L * 1000L;  // 7 hours in milliseconds
//unsigned long delayDuration =   1L * 10L * 60L * 1000L;//7hours * 1h=60min * 1min=60sec * 1sec=1000ms
void setup() {
  pinMode(relayPin, OUTPUT);
  startTime = millis();
 178:	5c df       	rcall	.-328    	; 0x32 <millis>
 17a:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <startTime>
 17e:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <startTime+0x1>
 182:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <startTime+0x2>
 186:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <startTime+0x3>
digitalWrite():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/Arduino.h:327
    
    // If on a timer, turn it off (or fall through if we don't optimize that)
    if(digitalPinToTimer(pin) != NOT_ON_TIMER )
    {
      #if OPTIMIZE_DIGITAL_WRITE_ON_TIMER
        turnOffPWM(digitalPinToTimer(pin));
 18a:	8f b5       	in	r24, 0x2f	; 47
 18c:	8f 73       	andi	r24, 0x3F	; 63
 18e:	8f bd       	out	0x2f, r24	; 47
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/Arduino.h:341
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
      return;
    }
    else // Can only be LOW here, no need to check
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
 190:	c0 98       	cbi	0x18, 0	; 24
loop():
F:\360TECHKNOWLEDGE-Git2023\360-TECH-KNOWLEDGE\Selected_Time_Load_Control/Selected_Time_Load_Control.ino:19

void loop() {
  // Turn on the relay for 7 hours
  digitalWrite(relayPin, 0);
  //    Serial.println(millis());
  if (millis() - startTime >= delayDuration) {
 192:	4f df       	rcall	.-354    	; 0x32 <millis>
 194:	00 91 64 00 	lds	r16, 0x0064	; 0x800064 <startTime>
 198:	10 91 65 00 	lds	r17, 0x0065	; 0x800065 <startTime+0x1>
 19c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <startTime+0x2>
 1a0:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <startTime+0x3>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 1b       	sub	r24, r16
 1aa:	91 0b       	sbc	r25, r17
 1ac:	a2 0b       	sbc	r26, r18
 1ae:	b3 0b       	sbc	r27, r19
 1b0:	80 38       	cpi	r24, 0x80	; 128
 1b2:	95 48       	sbci	r25, 0x85	; 133
 1b4:	a0 48       	sbci	r26, 0x80	; 128
 1b6:	b1 40       	sbci	r27, 0x01	; 1
 1b8:	40 f3       	brcs	.-48     	; 0x18a <main+0x2e>
digitalWrite():
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/Arduino.h:327
    
    // If on a timer, turn it off (or fall through if we don't optimize that)
    if(digitalPinToTimer(pin) != NOT_ON_TIMER )
    {
      #if OPTIMIZE_DIGITAL_WRITE_ON_TIMER
        turnOffPWM(digitalPinToTimer(pin));
 1ba:	8f b5       	in	r24, 0x2f	; 47
 1bc:	8f 73       	andi	r24, 0x3F	; 63
 1be:	8f bd       	out	0x2f, r24	; 47
C:\Users\RaselAhmed\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc5.4\cores\tiny/Arduino.h:336
      #endif
    }

    if(val == HIGH)
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
 1c0:	c0 9a       	sbi	0x18, 0	; 24
loop():
F:\360TECHKNOWLEDGE-Git2023\360-TECH-KNOWLEDGE\Selected_Time_Load_Control/Selected_Time_Load_Control.ino:22
    digitalWrite(relayPin, 1);
    // Put the ATtiny13 to sleep to conserve power
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 1c2:	85 b7       	in	r24, 0x35	; 53
 1c4:	87 7e       	andi	r24, 0xE7	; 231
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	85 bf       	out	0x35, r24	; 53
F:\360TECHKNOWLEDGE-Git2023\360-TECH-KNOWLEDGE\Selected_Time_Load_Control/Selected_Time_Load_Control.ino:23
    sleep_mode();
 1ca:	85 b7       	in	r24, 0x35	; 53
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	85 bf       	out	0x35, r24	; 53
 1d0:	88 95       	sleep
 1d2:	85 b7       	in	r24, 0x35	; 53
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	85 bf       	out	0x35, r24	; 53
 1d8:	d8 cf       	rjmp	.-80     	; 0x18a <main+0x2e>

000001da <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2279
 1da:	f8 94       	cli

000001dc <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2281
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
